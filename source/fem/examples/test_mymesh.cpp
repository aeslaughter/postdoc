/** \example test_mymesh.cpp 
 * A test function for testing the MyMesh class.
 * 
 * This is the source code for a simple test function that tests the 
 * functionality of the MyMessh class associated with my custom fem library. 
 * To run this example simply execute the \c test_mymesh executable from
 * within the \c /bin directory. 
 */
 
// LibMesh related includes
#include <iostream>
#include "libmesh.h"
#include "mesh.h"
#include "mesh_generation.h"
#include "boundary_info.h"

// My custom fem library includes
#include "fem/include.h"
using namespace SlaughterFEM;

using namespace libMesh;

//! Main program for testing the fem related functions
/** This function is the main program executed to test that libMesh is
 * properly linked and that my custom fem library MyMesh class is
 * functioning correctly.
 * 
 * The command-line arguments are parsed into the two input variables 
 * of this program:
 * \param argc The command-line argument count
 * \param argv An array of characters that contain the command-line text, 
 * this text is parsed with the initialization of libMesh
 */ 
int main(int argc, char** argv)
{   
    LibMeshInit init (argc, argv);

    MyMesh mesh;
    MeshTools::Generation::build_square(mesh, 3, 3); 
    mesh.find_neighbors();
    
	printf("\n\nBoundary id's generated by libMesh:\n");
    mesh.boundary_info->print_info();
   
	printf("\n\nBoundary id's generated by MyMesh class (+10):\n"); 
    mesh.boundary_info->clear();
    mesh.add_boundary_id(10,"y",0.); // bottom
    mesh.add_boundary_id(11,"x",1.); // right-side
    mesh.add_boundary_id(12,"y",1.); // top
    mesh.add_boundary_id(13,"x",0.); // left
    mesh.boundary_info->print_info();
   
}
